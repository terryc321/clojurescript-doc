

download leiningen script from https://leiningen.org/
https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
make a ~/bin directory
place script into ~/bin
make it executable
chmod +x ~/bin/lein
add ~/bin to bash PATH
> export PATH=$PATH:~/bin

test if leiningen is installed correctly
> lein
--------------------------------------------------------------------
Leiningen is a tool for working with Clojure projects.

Several tasks are available:
change              Rewrite project.clj with f applied to the value at key-or-path.
check               Check syntax and warn on reflection.
classpath           Write the classpath of the current project to output-file.
clean               Removes all files from paths in clean-targets for a project
cljsbuild           Compile ClojureScript source into a JavaScript file.
compile             Compile Clojure source into .class files.
deploy              Deploy jar and pom to remote repository.
deps                Show details about dependencies.
do                  Higher-order task to perform other tasks in succession.
figwheel            Figwheel - a tool that helps you compile and reload ClojureScript.
help                Display a list of tasks or help for a given task or subtask.
install             Install jar and pom to the local repository; typically ~/.m2.
jar                 Package up all the project's files into a jar file.
javac               Compile Java source files.
new                 Generate scaffolding for a new project based on a template.
plugin              DEPRECATED. Please use the :user profile instead.
pom                 Write a pom.xml file to disk for Maven interoperability.
release             Perform release tasks.
repl                Start a repl session either with the current project or standalone.
retest              Run only the test namespaces which failed last time around.
run                 Run the project's -main function.
search              Search Central and Clojars for published artifacts.
show-profiles       List all available profiles or display one if given an argument.
test                Run the project's tests.
trampoline          Run a task without nesting the project's JVM inside Leiningen's.
uberjar             Package up the project files and all dependencies into a jar file.
update-in           Perform arbitrary transformations on your project map.
upgrade             Upgrade Leiningen to specified version or latest stable.
vcs                 Interact with the version control system.
version             Print version for Leiningen and the current JVM.
with-profile        Apply the given task with the profile(s) specified.

Run `lein help $TASK` for details.

Global Options:
  -o             Run a task offline.
  -U             Run a task after forcing update of snapshots.
  -h, --help     Print this help or help for a specific task.
  -v, --version  Print Leiningen's version.

These aliases are available:
downgrade, expands to upgrade

See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
mixed-source, templates, and copying.
--------------------------------------------------------------------

started new project using
> lein new figwheel foo -- --reagent

we should see web browser open tab at
localhost:3449/index.html

--------------------------------------------------------------------

clojurescript

--------------------------------------------------------------------
clojure is truely multi-threaded.
clojurescript is single-threaded.

--------------------------------------------------------------------
clojurescript sits on javascript , it is therefore single threaded .

--------------------------------------------------------------------
clojurescript aside -- advanced

(defonce app-state (atom {:text "Hello world!"}))
this sets up app-state to be a reagent atom 

(:text @app-state)
this is a function to retrieve :text key from key-map
notice @ at symbol.
this enables reading the reagent atom called app-state

when we write to app-state using reset! or swap! we do not need to
use @ at symbol , if we do that would be in error.
(reset! app-state ...)
(swap! app-state ...)


--------------------------------------------------------------------
hiccup 

[:h1 (: text @app-state)]

--------------------------------------------------------------------



[:h1 className="header-class" id="header1" "this is a header"]
[:div 
 [:p "this is a paragraph"]
      ]



      
