
--------------------------------------------------------------------
Installation process

download leiningen script from https://leiningen.org/
https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
make a ~/bin directory
place script into ~/bin
make it executable
chmod +x ~/bin/lein
add ~/bin to bash PATH
> export PATH=$PATH:~/bin

test if leiningen is installed correctly
> lein
--------------------------------------------------------------------
Leiningen is a tool for working with Clojure projects.

Several tasks are available:
change              Rewrite project.clj with f applied to the value at key-or-path.
check               Check syntax and warn on reflection.
classpath           Write the classpath of the current project to output-file.
clean               Removes all files from paths in clean-targets for a project
cljsbuild           Compile ClojureScript source into a JavaScript file.
compile             Compile Clojure source into .class files.
deploy              Deploy jar and pom to remote repository.
deps                Show details about dependencies.
do                  Higher-order task to perform other tasks in succession.
figwheel            Figwheel - a tool that helps you compile and reload ClojureScript.
help                Display a list of tasks or help for a given task or subtask.
install             Install jar and pom to the local repository; typically ~/.m2.
jar                 Package up all the project's files into a jar file.
javac               Compile Java source files.
new                 Generate scaffolding for a new project based on a template.
plugin              DEPRECATED. Please use the :user profile instead.
pom                 Write a pom.xml file to disk for Maven interoperability.
release             Perform release tasks.
repl                Start a repl session either with the current project or standalone.
retest              Run only the test namespaces which failed last time around.
run                 Run the project's -main function.
search              Search Central and Clojars for published artifacts.
show-profiles       List all available profiles or display one if given an argument.
test                Run the project's tests.
trampoline          Run a task without nesting the project's JVM inside Leiningen's.
uberjar             Package up the project files and all dependencies into a jar file.
update-in           Perform arbitrary transformations on your project map.
upgrade             Upgrade Leiningen to specified version or latest stable.
vcs                 Interact with the version control system.
version             Print version for Leiningen and the current JVM.
with-profile        Apply the given task with the profile(s) specified.

Run `lein help $TASK` for details.

Global Options:
  -o             Run a task offline.
  -U             Run a task after forcing update of snapshots.
  -h, --help     Print this help or help for a specific task.
  -v, --version  Print Leiningen's version.

These aliases are available:
downgrade, expands to upgrade

See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
mixed-source, templates, and copying.
--------------------------------------------------------------------

started new project using
> lein new figwheel foo -- --reagent

we should see web browser open tab at
localhost:3449/index.html

--------------------------------------------------------------------

clojurescript is translated into javascript.
all properties of javascript are therefore inherited by clojurescript.

translation is into the language of the browser.
the browser only sees 

--------------------------------------------------------------------
clojurescript aside -- advanced

(defonce app-state (atom {:text "Hello world!"}))
this sets up app-state to be a reagent atom 

(:text @app-state)
this is a function to retrieve :text key from key-map
notice @ at symbol.
this enables reading the reagent atom called app-state

when we write to app-state using reset! or swap! we do not need to
use @ at symbol , if we do that would be in error.
(reset! app-state ...)
(swap! app-state ...)



--------------------------------------------------------------------------------------
hiccup 

here run through html elements in clojurescript and see the html/javascript counterpart

--------------------------------------------------------------------------------------

this is a header

[:h1 "this is a header"]

<h1>this is a header</h1>

--------------------------------------------------------------------

map 

now introducing key-maps
key begins with : colon semicolon?
{:a 1 :b 2 :c 3}

this is a header with classname "header-class" and text "this is a header"

[:h1 {:className="header-class"} "this is a header"]

<h1 className="header-class">this is a header</h1>

--------------------------------------------------------------------

this is a header with id header-id and text "this is a header"

[:h1 {:id "header-id"} "this is a header"]

<h1 id="header-id-1">this is a header</h1>

--------------------------------------------------------------------

this is a header with a classname "header-class" and id "header-id-1"

[:h1 {:className "header-class" :id "header-id-1"} "this is a header"]

<h1 className="header-class" id="header-id-1">this is a header</h1>
--------------------------------------------------------------------

this is a header with text "my header"

[:h1 "myheader"]

the javascript translation
<h1>myheader</h1>

--------------------------------------------------------------------

examples so far have only used fixed values, now we move to programming where we
read the value of a variable.

this is also a header , except now text is taken from key-map app-state.
because defined app-state as a reagent atom , to read the atom we need to
put a ampersand @ symbol before the symbol.

[:h1 (: text @app-state)]

this means read app-state reagent atom , extract :text key and make it a header 
if (:text @app-state) returns "Hello world!" then
the javascript translation

<h1>Hello world!</h1>

--------------------------------------------------------------------

[:p "this is a paragraph"]

--------------------------------------------------------------------

line breaks are empty elements

[:br]



--------------------------------------------------------------------

[:div ]

--------------------------------------------------------------------

css style , at some point we may want to style an element

here is a div with background "blue"

[:div {:style {:background "blue"}}
 ]

--------------------------------------------------------------------

in clojurescript web page text must be quoted

[:div
 "this is some webpage text"
 ]


--------------------------------------------------------------------

[:span ]

no idea what span is for

--------------------------------------------------------------------

image 

[:img src=""]

--------------------------------------------------------------------

svg 


--------------------------------------------------------------------

set title of html page in clojurescript
;; no javascript setTitle method , simply assign in place
;;(js/document.setTitle "this is my title")
(set! js/document.title "something-else123")

or can change actual html page , kept at 
resources/public/index.html

<head>
<title>your title</title>
</head>

--------------------------------------------------------------------

anchor element with href link 

[:a {:href "www.google.co.uk"}
 "this is your link text"
 ]

<a href="www.google.co.uk">this is your link text</a>



--------------------------------------------------------------------

[:img {:src "img/church.jpg" :width 500 :height 600}]

<img src="img_girl.jpg" width="500" height="600"> 

--------------------------------------------------------------------

[:p {:style {:color "white" :background-color "black"}} "this is my paragraph"]

<p style="color:red">This is my paragraph</p>

--------------------------------------------------------------------


[:p
 "This is" [:br]
 "a paragraph" [:br]
 "with line breaks" [:br]
 ]

<p>This is<br>a paragraph<br>with line breaks.</p>

--------------------------------------------------------------------
[:pre
 "This text is pre-formatted\nand so does not need any\n4.\n5.\n6.\n"
 ]

--------------------------------------------------------------------
(set! js/document.body.bgColor "powderblue")

document.body.bgColor = "powderblue";

--------------------------------------------------------------------



<h1 style="color:blue">This is a heading</h1>


--------------------------------------------------------------------


<p style="color:red">This is a paragraph</p>
--------------------------------------------------------------------
[:h1 {:style {:font-family "verdana"}} "this is a heading"]
   

<h1 style="font-family:verdana;">This is a heading</h1>
--------------------------------------------------------------------

[:p {:style {:font-family "courier"}} "this is a paragraph"]
   
<p style="font-family:courier;">This is a paragraph.</p>
--------------------------------------------------------------------
[:h1 {:style {:font-size "300%"}} "this is a heading"]

<h1 style="font-size:300%;">This is a heading</h1>
--------------------------------------------------------------------

[:p {:style {:font-size "160%"}} "this is a paragraph"]

<p style="font-size:160%;">This is a paragraph.</p> 

--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------


--------------------------------------------------------------------

html lang Attribute

<!DOCTYPE html>
<html lang="en-US">
<body>
...
</body>
</html>

--------------------------------------------------------------------

<p title="I'm a tooltip">This is a paragraph</p>



--------------------------------------------------------------------

   
   [:h1 {:className "header-class"
         :id "header-id-1"       
         }
    (:text @app-state)]
   
   [:h3 "Edit this !"]
   
   [:div {:style {:background "orange"}}
    "some text"
    [:br]
    "some more text"
    [:br]
    [:p {:title "this is a tooltip"} "this is a paragraph"]
    [:a {:href "http://www.google.co.uk"} "this is your link text"]
    ]


[:div {:style {:background "blue"}}
   
   ])


--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------
what if javascript is all disabled by user ?
no clojurescript then ?

--------------------------------------------------------------------

--------------------------------------------------------------------

--------------------------------------------------------------------

--------------------------------------------------------------------

--------------------------------------------------------------------

--------------------------------------------------------------------

javascript interop

ability to talk to underlying javascript is very useful



--------------------------------------------------------------------
(js/alert (document.getElementById "header-id-1"))

[object HTMLHeadingElement]

--------------------------------------------------------------------


:on-click #js [(alert "hello world")]

--------------------------------------------------------------------





      
